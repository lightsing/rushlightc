COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

rl_ident = @{ (("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)+) }
rust_ident = ${ ("r#" ~ rl_ident) }
ident = { rl_ident | rust_ident }

annotation = ${ "@" ~ rl_ident ~ ("(" ~ rl_ident ~ ")")? }

basic_escapes = @{ "\\" ~ (("x" ~ ASCII_HEX_DIGIT{2}) | "n" | "r" | "t" | "\\" | "0") }
unicode_escapes = @{ "\\u" ~ ASCII_HEX_DIGIT{1, 6} }
quote_escapes = @{ "\\" ~ ("'" | "\"") }
escape_sequence = {
    basic_escapes
    | unicode_escapes
    | quote_escapes
}

any_inner_sequence = @{ (!PEEK ~ ANY)+ }
non_new_line_inner_sequence = @{ (!(PEEK | NEWLINE) ~ ANY)+ }
mstring_inner = ${ (escape_sequence | any_inner_sequence)* }
/// multi-line string
mstring = ${ PUSH("\"\"\"" | "'''") ~ mstring_inner ~ POP }

sstring_inner = ${ (escape_sequence | non_new_line_inner_sequence)* }
/// single-line string
sstring = ${ PUSH("\"" | "'") ~ sstring_inner ~ POP }
/// string literal
string_literal = ${	mstring | sstring }

visual_sep = _{ "_" }
ASCII_DIGITS = @{
	(ASCII_DIGIT ~ (ASCII_DIGIT | (&(visual_sep ~ ASCII_DIGIT) ~ visual_sep))*)
}
decimal_integer = @{ ASCII_DIGITS }
hex_integer = @{ "0x" ~ ASCII_HEX_DIGIT ~ (ASCII_HEX_DIGIT | visual_sep)* }
octal_integer = @{ "0o" ~ ASCII_OCT_DIGIT ~ (ASCII_OCT_DIGIT | visual_sep)* }
binary_integer = @{ "0b" ~ ASCII_BIN_DIGIT ~ (ASCII_BIN_DIGIT | visual_sep)* }
floating_point = @{
	ASCII_DIGITS* ~ "." ~ ASCII_DIGITS
    ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGITS)?
}
number_literal = {
	floating_point
    | hex_integer
    | octal_integer
    | binary_integer
	| decimal_integer
}